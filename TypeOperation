package com.atoudeft.banque;

import java.io.Serializable;

public enum TypeOperation implements Serializable {
    DEPOT,
    RETRAIT,
    FACTURE,
    TRANSFER;
}
package com.atoudeft.banque;

import java.io.Serializable;
import java.util.Date;

public abstract class Operation implements Serializable {
    private TypeOperation type;
    private Date date;

    public Operation(TypeOperation type) {
        this.type = type;
        this.date = new Date();  // Date actuelle lors de la création de l'opération
    }

    public TypeOperation getType() {
        return this.type;
    }

    public Date getDate() {
        return this.date;
    }

    @Override
    public abstract String toString();
}
package com.atoudeft.banque;

public class OperationDepot extends Operation {
    private double montant;

    public OperationDepot(double montant) {
        super(TypeOperation.DEPOT);
        this.montant = montant;
    }

    @Override
    public String toString() {
        return super.getDate() + "\t" + this.getType() + "\t" + this.montant + " $";
    }
}
package com.atoudeft.banque;

public class OperationRetrait extends Operation {
    private double montant;

    public OperationRetrait(double montant) {
        super(TypeOperation.RETRAIT);
        this.montant = montant;
    }

    @Override
    public String toString() {
        return super.getDate() + "\t" + this.getType() + "\t" + this.montant + " $";
    }
}
package com.atoudeft.banque;

public class OperationFacture extends Operation {
    private double montant;
    private int numeroFacture;
    private String description;

    public OperationFacture(double montant, int numeroFacture, String description) {
        super(TypeOperation.FACTURE);
        this.montant = montant;
        this.numeroFacture = numeroFacture;
        this.description = description;
    }

    @Override
    public String toString() {
        return super.getDate() + "\t" + this.getType() + "\t" + this.montant + " $\t" + this.numeroFacture + "\n" + this.description;
    }
}
package com.atoudeft.banque;

public class OperationTransfer extends Operation {
    private double montant;
    private String numeroCompteDestinataire;

    public OperationTransfer(double montant, String numeroCompteDestinataire) {
        super(TypeOperation.TRANSFER);
        this.montant = montant;
        this.numeroCompteDestinataire = numeroCompteDestinataire;
    }

    @Override
    public String toString() {
        return super.getDate() + "\t" + this.getType() + "\t" + this.montant + " $\t" + this.numeroCompteDestinataire;
    }
}
package com.atoudeft.banque.serveur;

import com.atoudeft.banque.*;

public class GestionnaireEvenementServeur {

    private Banque banque;
    private CompteBancaire compteSelectionne;  // Variable pour stocker le compte sélectionné

    public GestionnaireEvenementServeur(Banque banque) {
        this.banque = banque;
    }

    public void selectionnerCompte(CompteBancaire compte) {
        this.compteSelectionne = compte;  // Permet de sélectionner un compte
    }

    public void traiter(Evenement evenement) {
        String typeEvenement = evenement.getType();
        String argument = evenement.getArgument();

        // Vérifier si un compte est sélectionné
        if (compteSelectionne == null) {
            cnx.envoyer("Aucun compte sélectionné.");
            return;
        }

        switch (typeEvenement) {
            case "DEPOT":
                double montantDepot = Double.parseDouble(argument);
                if (compteSelectionne.crediter(montantDepot)) {
                    OperationDepot operationDepot = new OperationDepot(montantDepot);
                    historique.push(operationDepot);
                    cnx.envoyer("DEPOT OK");
                } else {
                    cnx.envoyer("DEPOT NO");
                }
                break;

            case "RETRAIT":
                double montantRetrait = Double.parseDouble(argument);
                if (compteSelectionne.debiter(montantRetrait)) {
                    OperationRetrait operationRetrait = new OperationRetrait(montantRetrait);
                    historique.push(operationRetrait);
                    cnx.envoyer("RETRAIT OK");
                } else {
                    cnx.envoyer("RETRAIT NO");
                }
                break;

            case "FACTURE":
                String[] argsFacture = argument.split(" ");
                double montantFacture = Double.parseDouble(argsFacture[0]);
                int numeroFacture = Integer.parseInt(argsFacture[1]);
                String descriptionFacture = argsFacture[2];
                if (compteSelectionne.payerFacture(descriptionFacture, montantFacture, String.valueOf(numeroFacture))) {
                    OperationFacture operationFacture = new OperationFacture(montantFacture, numeroFacture, descriptionFacture);
                    historique.push(operationFacture);
                    cnx.envoyer("FACTURE OK");
                } else {
                    cnx.envoyer("FACTURE NO");
                }
                break;

            case "TRANSFER":
                String[] argsTransfer = argument.split(" ");
                double montantTransfer = Double.parseDouble(argsTransfer[0]);
                String compteDestinataire = argsTransfer[1];
                if (compteSelectionne.transferer(montantTransfer, compteDestinataire)) {
                    OperationTransfer operationTransfer = new OperationTransfer(montantTransfer, compteDestinataire);
                    historique.push(operationTransfer);
                    cnx.envoyer("TRANSFER OK");
                } else {
                    cnx.envoyer("TRANSFER NO");
                }
                break;

            default:
                cnx.envoyer("Commande inconnue");
                break;
        }
    }
}
